using FluentAssertions;
using Moq;
using Moq.Protected;
using NUnit.Framework;
using System.Net;

namespace Tests
{
	public class OllamaApiClientTests
	{
		private OllamaApiClient _client;
		private HttpResponseMessage _response;

		[OneTimeSetUp]
		public void Setup()
		{
			var mockHandler = new Mock<HttpMessageHandler>(MockBehavior.Strict);
			
			mockHandler
				.Protected()
				.Setup<Task<HttpResponseMessage>>(
					"SendAsync",
					ItExpr.Is<HttpRequestMessage>(m => true),
					ItExpr.IsAny<CancellationToken>())
				.ReturnsAsync(() => _response);

			var httpClient = new HttpClient(mockHandler.Object) { BaseAddress = new Uri("http://empty") };
			_client = new OllamaApiClient(httpClient);
		}

		public class ListLocalModelsAsyncMethod : OllamaApiClientTests
		{
			[Test]
			public async Task Returns_Deserialized_Models()
			{
				_response = new HttpResponseMessage
				{
					StatusCode = HttpStatusCode.OK,
					Content = new StringContent("{\r\n\"models\": [\r\n{\r\n\"name\": \"codellama:latest\",\r\n\"modified_at\": \"2023-10-12T14:17:04.967950259+02:00\",\r\n\"size\": 3791811617,\r\n\"digest\": \"36893bf9bc7ff7ace56557cd28784f35f834290c85d39115c6b91c00a031cfad\"\r\n},\r\n{\r\n\"name\": \"llama2:latest\",\r\n\"modified_at\": \"2023-10-02T14:10:14.78152065+02:00\",\r\n\"size\": 3791737662,\r\n\"digest\": \"d5611f7c428cf71fb05660257d18e043477f8b46cf561bf86940c687c1a59f70\"\r\n},\r\n{\r\n\"name\": \"mistral:latest\",\r\n\"modified_at\": \"2023-10-02T14:16:24.841447764+02:00\",\r\n\"size\": 4108916688,\r\n\"digest\": \"8aa307f73b2622af521e8f22d46e4b777123c4df91898dcb2e4079dc8fdf579e\"\r\n},\r\n{\r\n\"name\": \"vicuna:latest\",\r\n\"modified_at\": \"2023-10-06T09:44:16.936312659+02:00\",\r\n\"size\": 3825517709,\r\n\"digest\": \"675fa173a76abc48325d395854471961abf74b664d91e92ffb4fc03e0bde652b\"\r\n}\r\n]\r\n}\r\n")
				};

				var models = await _client.ListLocalModels();
				models.Count().Should().Be(4);

				var first = models.First();
				first.Name.Should().Be("codellama:latest");
				first.ModifiedAt.Date.Should().Be(new DateTime(2023, 10, 12));
				first.Size.Should().Be(3791811617);
				first.Digest.Should().StartWith("36893bf9bc7ff7ace5655");
			}
		}

		public class ShowMethod : OllamaApiClientTests
		{
			[Test]
			public async Task Returns_Deserialized_Models()
			{
				_response = new HttpResponseMessage
				{
					StatusCode = HttpStatusCode.OK,
					Content = new StringContent("{\r\n  \"license\": \"<contents of license block>\",\r\n  \"modelfile\": \"# Modelfile generated by \\\"ollama show\\\"\\n\\n\",\r\n  \"parameters\": \"stop                           [INST]\\nstop [/INST]\\nstop <<SYS>>\\nstop <</SYS>>\",\r\n  \"template\": \"[INST] {{ if and .First .System }}<<SYS>>{{ .System }}<</SYS>>\\n\\n{{ end }}{{ .Prompt }} [/INST] \"\r\n}")
				};

				var info = await _client.ShowModelInformation("codellama:latest");

				info.License.Should().Contain("contents of license block");
				info.Modelfile.Should().StartWith("# Modelfile generated");
				info.Parameters.Should().StartWith("stop");
				info.Template.Should().StartWith("[INST]");
			}
		}

		public class GenerateEmbeddingsMethod : OllamaApiClientTests
		{
			[Test]
			public async Task Returns_Deserialized_Models()
			{
				_response = new HttpResponseMessage
				{
					StatusCode = HttpStatusCode.OK,
					Content = new StringContent("{\r\n  \"embedding\": [\r\n    0.5670403838157654, 0.009260174818336964, 0.23178744316101074, -0.2916173040866852, -0.8924556970596313  ]\r\n}")
				};

				var info = await _client.GenerateEmbeddings(new GenerateEmbeddingRequest { Model = "", Prompt = "" });

				info.Embedding.Should().HaveCount(5);
				info.Embedding.First().Should().BeApproximately(0.567, precision: 0.01);
			}
		}
	}
}